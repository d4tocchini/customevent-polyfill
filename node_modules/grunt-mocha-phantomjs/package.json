{
  "name": "grunt-mocha-phantomjs",
  "description": "Run client-side mocha tests using phantomjs",
  "version": "0.2.8",
  "homepage": "https://github.com/jdcataldo/grunt-mocha-phantomjs",
  "author": {
    "name": "Justin Cataldo",
    "email": "jdcataldo@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jdcataldo/grunt-mocha-phantomjs.git"
  },
  "bugs": {
    "url": "https://github.com/jdcataldo/grunt-mocha-phantomjs/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jdcataldo/grunt-mocha-phantomjs/blob/master/LICENSE-MIT"
    }
  ],
  "scripts": {
    "test": "grunt"
  },
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "mocha-phantomjs": "~2.0.1",
    "phantomjs": "~1.9.0-1"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "mocha",
    "mocha-phantomjs",
    "phantomjs"
  ],
  "readme": "# grunt-mocha-phantomjs\n\n> A simple wrapper to run client-side mocha tests using [mocha-phantomjs](http://metaskills.net/mocha-phantomjs/)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-mocha-phantomjs --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-mocha-phantomjs');\n```\n\n## The \"mocha_phantomjs\" task\n\n_Run this task with the `grunt mocha_phantomjs` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n[PhantomJS][] is installed when installing using NPM. \n\n[PhantomJS]: http://www.phantomjs.org/\n\n### Options\n\n#### reporter\nType: `String`  \nDefault: `spec`\n\nThe reporter that should be used. See [the supported reporters](https://github.com/metaskills/mocha-phantomjs#supported-reporters) for more information.\n\n#### output\nType: `String`  \n\nThe file that the task should output the results to. If `output` is specified, the task will always complete and not throw an error code if errors are found. The CI will determine if the build failed or not.\n\n#### urls\nType: `Array`  \nDefault: `[]`\n\nAbsolute `http://` or `https://` urls to be passed to PhantomJS. Specified URLs will be merged with any specified `src` files first. Note that urls must be served by a web server, and since this task doesn't contain a web server, one will need to be configured separately. The [grunt-contrib-connect plugin](https://github.com/gruntjs/grunt-contrib-connect) provides a basic web server.\n\nAdditional arguments may be passed. See [mocha-phantomjs's](https://github.com/metaskills/mocha-phantomjs#usage) usage.\n\n### Usage examples\n\n#### Basic usage (CI checks for error code)\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  mocha_phantomjs: {\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### File output for CI\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  mocha_phantomjs: {\n    options: {\n      'reporter': 'xunit',\n      'output': 'tests/results/result.xml'\n    },\n    all: ['test/**/*.html']\n  }\n});\n```\n\n#### Local server\nInclude the [grunt-contrib-connect plugin][] to run a local server\n[grunt-contrib-connect plugin]: https://github.com/gruntjs/grunt-contrib-connect\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  mocha_phantomjs: {\n    all: {\n      options: {\n        urls: [\n          'http://localhost:8000/test/foo.html',\n          'http://localhost:8000/test/bar.html'\n        ]\n      }\n    }\n  },\n  connect: {\n      server: {\n        options: {\n          port: 8000,\n          base: '.',\n        }\n      }\n    }\n});\n\ngrunt.registerTask('test', ['connect', 'mocha_phantomjs']);\n```\n\n## Release History\n\n* 2013-04-19   v0.2.8   Fix path to mocha-phantomjs binary on windows when not installed with plugin\n* 2013-04-19   v0.2.7   Fixes error thrown when tests pass and no output file specified\n* 2013-04-18   v0.2.6   Fix path to mocha-phantomjs binary on windows\n* 2013-04-18   v0.2.5   Added an output option to write test results to a file for CI support\n* 2013-04-15   v0.2.2   Added exit code to report failed tests with Travis CI\n* 2013-04-11   v0.2.1   Added check for existing local install of mocha-phantomjs\n* 2013-04-08   v0.2.0   Update phantomjs to 1.9.0 to fix unzipping issue\n* 2013-03-27   v0.1.1   Fix to omit urls from being passed to phantomjs\n* 2013-03-27   v0.1.0   Initial release supporting all options for mocha-phantomjs\n\n\n### Notes\nThis is a very basic implementation of mocha-phantomjs. Failed tests and errors do not bubble up for custom reporting. The idea of this is to be mainly used by a CI and let the CI manage the error reporting.",
  "readmeFilename": "README.md",
  "_id": "grunt-mocha-phantomjs@0.2.8",
  "_from": "grunt-mocha-phantomjs@~0.2.8"
}
